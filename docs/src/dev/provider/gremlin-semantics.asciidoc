////
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
////
[[gremlin-semantics]]
= Gremlin Semantics

image:tinkerpop-meeting-room.png[]

This section provides details on Gremlin language operational semantics. Describing these semantics and reinforcing
them with tests in the Gremlin test suite makes it easier for providers to implement the language and for the
TinkerPop Community to have better consistency in their user experiences. While the general Gremlin test suite offers
an integrated approach to testing Gremlin queries, the `@StepClassSemantics` oriented tests found
link:https://github.com/apache/tinkerpop/tree/x.y.z/gremlin-test/features[here] are especially focused to the
definitions found in this section. References to the location of specific tests can be found throughout the
sub-sections below.

== Types

The TinkerPop query execution runtime handles the following primitive types:

* Boolean: true or false
* Integer
  ** int8
  ** int16 (short)
  ** int32
  ** int64 (long)
  ** uint8 (byte)
  ** uint16
  ** uint32
  ** uint64
  ** BigInt
* Float
  ** float32
  ** float64 (double)
  *** In Double and Float, we have a concept of INFINITY / https://en.wikipedia.org/wiki/Signed_zero[signed-zero], and NaN.
  ** BigFloat
* String / Char
* UUID
* Date
* `nulltype`
  ** Has only one value in its type space - the "undefined" value `null`

NOTE: TinkerPop has a bit of a JVM-centric view of types as it was developed within that ecosystem.

Graph providers may not support all of these types depending on the architecture and implementation. Therefore
TinkerPop must provide a way for Graph providers to override the behavior while it has its own default behavior. Also
when some types are not supported Graph providers needs to map unsupported types into supported types internally. This
mapping can be done in either information-preserving manner or non-preserving manner. Graph providers must tell which
mapping they support through `Graph.Features` as well as which types they support.

* Which atomic types are supported
  ** Boolean, Integer, Float, String, UUID and Date
  ** TinkerPop by default supports all of them
* Which integer types are supported
  ** int8, int16, int32, int64, uint8, uint16, uint32, uint64, BigInt
  ** TinkerPop by default supports uint8 (byte), int16 (short), int32 (int), int64 (long) and BigInt
* Which float types are supported
  ** float32, float64 and BigFloat
  ** TinkerPop by default supports all as float, double, and BigDecimal in Java

In addition to these, there are composite types as follows:

* Vertex
* Edge
* VertexProperty
* Property
** Edge property
** Vertex meta property
* PropertyKey
* PropertyValue
* Label
* ID
* Path
* List
* Map
* Set / BulkSet
* Map.Entry (obtained from unfolding a Map)

== Type Casting

TinkerPop performs type casting a.k.a type promotion for Numbers. Numbers are  Byte, Short, Integer, Long, Float,
Double, BigInteger, and BigDecimal. Here is the rule how types are promoted:

* If at least one is BigDecimal then compare as BigDecimal
* If at least one is BigInteger then compare as BigInteger
* If at least one is Double then compare as Double
* If one of them is a Float, then convert both to floating type of highest common bit denomination
** If another value is Long or Double, we need 64bit so convert both to Double
** Otherwise convert both to Float
* If at least one is Long then compare as Long
* If at least one is Integer then compare as Integer
* If at least one is Short then compare as Short
* If at least one is Byte then compare as Byte

BigDecimal and BigInteger may not be supported depending on the language and Storage, therefore the behavior of type
casting for these two types can vary depending on a Graph provider.

== Equality vs. Equivalence

Equality defines when two values are considered equal in the context of database lookups and predicates, while
equivalence defines value collation semantics in the context of, for instance, deduplication. For instance,
equivalence over two values `a := Double.NaN` and `b:= Double.NaN` is true, but equality would (in our proposal) be
defined as false; the rational here (which is commonly found in query and programming languages) is that comparing two
"unknown" numbers â€” which is a frequent use case for NaN, cannot certainly be identified as equal in comparison, but it
typically makes sense to group them together in, for instance, aggregations and order by.

Both equality and equivalence can be understood as complete, i.e. the result of equality and equivalence checks is
always either `true` or `false` (in particular, it never returns nulltype` or throws an exception). The details on
equality and equivalence are sketched in the following two subsections, respectively.

[[gremlin-semantics-equality]]
=== Equality

* Used by equality and membership predicates (such as `P.eq, `P.neq`, and the list membership `P.within`) in Gremlin.
When this `eq` operator returns `true` for two values (LHS and RHS), by definition LHS and RHS are equal to each other.
* If graph providers need join semantics in query execution, equality should be used to join data over join keys. +
Example:

[code]
----
// equality over two ids
gremlin> g.V().has(id, "some id")
// equality over vertices
gremlin> g.V().as("v").out().out().where(eq("v"))
----

* Equality adheres to type promotion semantics for numerical values, i.e. equality holds for values of different
numerical type if they cast into the exactly same same value of the lowest common super type.
* Other than the type promotion between Numbers, two values of different type are always regarded as not equal.
* Equality checks always return `true` or `false`. They never result in `nulltype` output, undefined behavior, nor do
they ever throw an error.

See: link:https://github.com/apache/tinkerpop/tree/x.y.z/gremlin-test/features/Equality.feature[Equality Tests]

==== Primitive types

===== Number

Number consists of Byte, Short, Integer, Long, Float, Double, BigInteger, and BigDecimal.

* If either one of LHS or RHS is Number and another isn't, eq returns `false`.
* If both LHS and RHS are Number, it follows the type casting described above and then check the equality.
* Example for edge cases:
    ** -0.0 eq 0.0  = `true`
    ** +0.0 eq 0.0 = `true`
    ** -0.0 eq +0.0 = `true`
    ** NaN eq NaN  = `false`
    ** +INF eq +INF = `true`
    ** -INF eq -INF = `true`
    ** -INF eq +INF = `false`
* TinkerPop is JVM based so there can be Â±INF^^float and Â±INF^^double, NaN^^float and NaN^^double. They also adhere to
the type promotion rules.

See: link:https://github.com/apache/tinkerpop/tree/x.y.z/gremlin-test/features/Equality.feature[Equality Tests - Scenarios prefixed with "Primitives_Number_"]

===== Boolean

* If either one of LHS or RHS is Boolean and another isn't, return `false`
* True != False, True == True, False == False

===== String

* If either one of LHS or RHS is String and another isn't, return `false`
* We assume the common graphical order over unicode strings.
* LHS and RHS needs to be lexicographically equal for LHS eq RHS == `true` for String.

===== UUID

* UUID is evaluated based on its String representation.
* However, for example, UUID("b46d37e9-755c-477e-9ab6-44aabea51d50") and String "b46d37e9-755c-477e-9ab6-44aabea51d50" are not equal to each other.

===== Date

* If either one of LHS or RHS is Date and another isn't, return `false`
* LHS eq RHS == `true` when both LHS and RHS value are numerically identical in Unix Epoch time.

===== nulltype

* If either one of LHS or RHS is `nulltype` and another isn't, return `false`
* If both LHS and RHS are `nulltype`, return `true`

==== Composite types

For all of them, if LHS and RHS is not of the same data type, equality returns `false`. The following semantics applied
when both LHS and RHS has the data type.

===== Vertex / Edge / VertexProperty

They are considered an `Element` family in TinkerPop and if two `Element` objects have the same type and have the same
`T.id`, they are considered as equal.

===== Property

If key and value are same, two properties are equal.

===== PropertyKey

`T.key` is `String` type so equality for String type applies.

===== PropertyValue

Any type, so equality for a corresponding type applies.

===== ID

`T.id` can be any type, so equality for a corresponding type applies.

===== Label

`T.label` is `String` type so equality for `String` type applies.

===== Path

Two `Path` objects are equal when their path elements are equal (using equality of List), and the corresponding path
labels are also equal.

===== List

* Two lists are equal if they contain the same (equal to each other) elements in the same order.

===== Map

* Two maps are equal when a Set of key-value pairs from those two maps are equal to each other. A key-value pair is
equal to another pair if and only if both its key and value are equal to each other.

===== Set

* Two sets are equal if they contain the same (equal to each other) elements.

=== Equivalence

* Equivalence defines how TinkerPop deals with two values to be grouped or de-duplicated. Specifically it is necessary
for the dedup and group steps in Gremlin. +
Example:

[code]
----
// deduplication needs equivalence over two property values
gremlin> g.V().dedup().by("name")
// grouping by equivalence over two property values
gremlin> g.V().group().by("age")
----

* Equivalence ignores type promotion semantics, i.e. two values of different types (e.g. 2^^int vs. 2.0^^float) are
always considered to be non-equivalent. (There is an open question whether equivalence takes type promotion into account).
* For Number,
** Because type promotion is not effective, if the types are different then two numbers are never equivalent
** NaN is not equal to NaN, but equivalent to each other
* Other than the edge case around NaN (and, as of today, Numbers), equivalence in TinkerPop is identical to equality.
* Like equality, equivalence checks always return `true` or `false`. They never result in `nulltype` output, undefined behavior, nor do they ever throw an error.

Equivalence is identical to Equality, except for the cases listed below.

==== Primitive types

===== Number

* Unlike Equality, we *don't do* type casting for Equivalence.
** If the type is different, they are not equivalent.
*** +INF^^double is not equivalent to +INF^^float
*** NaN^^double is not equivalent to NaN^^float
** 123 and 123.0 are equal but not equivalent to each other
* -0.0, 0.0, and +0.0 are not equivalent to each other
** -0.0 is equivalent to -0.0
** 0.0 is equivalent to 0.0
** +0.0 is equivalent to +0.0
* -INF and +INF are not equivalent to each other
** -INF is equivalent to -INF
** +INF is equivalent to +INF
** They are equialavlent to each other irrespective to its underlying type, so in Java, for example, Double.POSITIVE_INFINITY is equivalent to Float.POSITIVE_INFINITY.
* NaN is not equivalent to any (non-NaN) numbers
** NaN *is equivalent to* NaN irrespective to its underlying type, so in Java, for example, Double.NaN is equivalent to Float.NaN.

===== `nulltype`

* `nulltype` is not equivalent to any other values
* `nulltype` is equivalent to `nulltype`

== Comparability vs. Orderability

Comparability and orderability can be understood as analagous concepts to equality and equivalence but for range
comparisons (rather than exact comparison). For any two values within the same type space (except for NaN),
comparability and orderability are the same. The key differences between comparability and orderability are as follows:

|===
|Scenario|Comparability|Orderability

|NaN|Not comparable to anything, including itself|Appears after +Infinity in the numeric type space
|Two values of different types|Not comparable. This includes the `nulltype`|Subject to a total type ordering where every value of type A appears before
or after every value of Type B depending on the types
|===

Comparability is what is being used in range predicates. It is restricted to comparison within the same type or,
for numerics, class of types; comparability is complete within a given type, but returns `ERROR` if the two types are
considered incomparable (e.g., an integer cannot be compared to a string).

`ERROR` represents an extension of normal boolean logics - it is a third option value in a ternary
boolean logics system for boolean value expression evaluation. `ERROR` is an internal representation only and will not
be propagated back to the client as an exception - it will eventually hit a binary reduction operation and be reduced
to `false`. Before that happens though, it will be treated as its own boolean value that can be used in other boolean
value expressions, such as `AND`/`OR`:

|===
|A|B|=>|AND|OR|XOR

|TRUE | TRUE |=>| TRUE | TRUE | FALSE
|TRUE | FALSE |=>| FALSE | TRUE | TRUE
|TRUE | ERROR |=>| ERROR | TRUE | ERROR
|FALSE | TRUE |=>| FALSE | TRUE | TRUE
|FALSE | FALSE |=>| FALSE | FALSE | FALSE
|FALSE | ERROR |=>| FALSE | ERROR | ERROR
|ERROR | TRUE |=>| ERROR | TRUE | ERROR
|ERROR | FALSE |=>| FALSE | ERROR | ERROR
|ERROR | ERROR |=>| ERROR | ERROR | ERROR
|===

The NOT predicate inverts TRUE and FALSE, respectively, but maintains ERROR values. The key idea is that, for an
ERROR value, we can neither prove nor disprove the expression, and hence stick with ERROR.

|===
|arg|=>|result

|TRUE |=>| FALSE
|FALSE |=>| TRUE
|ERROR |=>| ERROR
|===

Common `ERROR` cases are comparisons against NaN, cross-type comparisons, or invalid arguments to other boolean value
expressions.

Orderability provides a stable sort order over mixed type results without errors or exceptions; it is consistent with
comparability within a type, and complete both within and across types, i.e. it will never return `ERROR` or throw
an exception.

More details on comparability and orderability are described in the following two subsections, respectively.

=== Comparability

Comparability is used by the compare operators (`P.gt`, `P.lt`, `P.gte`, `P.lte`) in Gremlin and defines how to
compare two values.

Example:

[code]
----
// comparison over two property values
gremlin> g.E().has("weight", P.gt(1))
----

Comparison should generally return true or false and not result in undefined behavior, but can return `ERROR` in certain
cases (comparison across data types, comparing against `NaN`, invalid arguments to other boolean value
expressions). How this `ERROR` result is handled is Graph provider dependent. The reference implementation does a final
binary reduction from `ERROR` to `FALSE` (and thus quietly filters the solution that produced the `ERROR`).

==== Primitive types

===== Number

* For numbers, comparison should be aligned to equality conceptually as far as type promotion is concerned.
e.g. `1.0 < 2 < 3L`
* If one argument a Number and the other isnâ€™t, return `ERROR` for all comparisons. This comes first before the handling
for each numeric type.
* If both LHS and RHS are Numbers, try the type casting, and then compare two values.
* For -0.0, 0.0, +0.0, lt and gt returns `false` and lte, gte returns `true` because they are "equal" in this semantics.
* -INF < +INF
* Any comparison between NaN and any Number (including NaN itself) returns `ERROR` (which is reduced to `false`) +
https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.3 +

===== Boolean

* If one argument is Boolean and the other isnâ€™t, returns `ERROR`.
* False < True

===== String

* If one argument is String and the other isnâ€™t, returns `ERROR`.
* We assume the common lexicographical order over unicode strings
* LHS and RHS are compared lexicographically

===== UUID

* If one argument is UUID and the other isnâ€™t, returns `ERROR`.
* UUID is evaluated based on its `String` representation.
* However, for example, UUID("b46d37e9-755c-477e-9ab6-44aabea51d50") and String "b46d37e9-755c-477e-9ab6-44aabea51d50"
cannot be compared with each other, hence comparing them returns `ERROR`.

===== Date

* If one argument is Date and the other isnâ€™t, returns `ERROR`.
* Compare LHS and RHS based on chronological order, i.e. numerical order in timestamp.

==== Composite types

For all of them, if LHS and RHS is not of the same type, compare returns `ERROR`. The following semantics applied
when both LHS and RHS have the same type:

===== Vertex / Edge / VertexProperty

They are compared by their ID. The ID is chosen internally by the implementation, so comparison is implementation
specific.

===== Property

Compared first by property key, then by property value according to comparability semantics.

===== PropertyKey

Comparability of String applies.

===== PropertyValue

Property values are of any primitive types defined, so comparability for a corresponding type applies.

===== ID

IDs are of any primitive types defined, so comparability for a corresponding type applies.

===== Label

Comparability of String applies.

===== Iterable (Path, List, Set, Map)

* Iterables must be of the same type, otherwise `ERROR` (e.g. List and Set are incomparable).
* Comparison of iterables without inherent order (Set and Map) are implementation-specific.
** For the reference implementation, all iterables are compared via their natural iteration order.
* Elements are compared element by element from the two iterations according to conmparability semantics.
* Empty iterations are equal and are less than non-empty iterations.
* If iteration `A` exhausts its elements before iteration `B` then `A < B`.

===== Path

* Only comparable to other Paths, otherwise `ERROR`.
* Iterable semantics apply.

===== Set

* Only comparable to other Sets, otherwise `ERROR`.
* Iterable semantics apply.

===== List

* Only comparable to other Lists, otherwise `ERROR`.
* Iterable semantics apply.

===== Map

* Only comparable to other Maps, otherwise `ERROR`.
* Iterable semantics apply (using `Map.entrySet()`)
* Map entries are compared first by key, then by value according to comparability semantics.

=== Mapping for P

The following table maps the notions proposed above to the various `P` operators:

[%header]
|================
|Predicate|Concept
|P.eq     |Equality
|P.neq    |Equality
|P.within |Equality
|P.without|Equality
|P.lt     |Comparability
|P.gt     |Comparability
|P.lte    |Equality, Comparability
|P.gte    |Equality, Comparability
|P.inside |Comparability
|P.outside|Comparability
|P.between|Equality, Comparability
|================

=== Orderability

Orderability semantics are used to define a global order across all Gremlin values. In the reference implementation, any
step using `Order.asc` or `Order.desc` (e.g. OrderGlobalStep, OrderLocalStep) will follow these semantics. Unlike
Comparability, Orderability will not result in `ERROR` for any comparisons - even if two values are incomparable we will
still be able to determine their respective order. We do this by defining a global order across type, and values in
different type spaces will be ordered according to their priority (e.g. all Numbers < all Strings).

We define the type space, and the global order across the type space as follows:
----
1.  nulltype
2.  Boolean
3.  Number
4.  Date
5.  String
6.  Vertex
7.  Edge
8.  VertexProperty
9.  Property
10. Path
11. Set
12. List
13. Map
14. Unknown
----

Within a given type space, orderability determines if two values are ordered at the same position or one value is
positioned before or after the another. When the position is identical, which value comes first (in other words,
whether it should perform stable sort) depends on graph providers' implementation. For almost all cases, comparability
can be used to determine orderability within a type space, with a few exceptions outlined below.

==== Primitive types

===== Number

Same as Comparability, except NaN is equivalent to NaN and is greater than all other Numbers, including +Infinity.
Additionally, because of type promotion (`1` == `1.0`), numbers of the same value but of different numeric types will
not have a stable sort order.

===== Boolean

Same as Comparability.

===== String

Same as Comparability.

===== UUID

Same as Comparability.

===== Date

Same as Comparability.

==== Composite types

===== Vertex / Edge / VertexProperty

Same as Comparability.

===== Property

Same as Comparability, except orderability semantics are used for the property value.

===== PropertyKey

Same as Comparability.

===== PropertyValue

General orderability semantics apply, since property values can be of any primitive type.

===== ID

General orderability semantics apply, since IDs can be of any primitive type.

===== Label

Same as Comparability.

===== Iterable (Path, List, Set, Map)

Same as Comparability, except orderability semantics apply for element comparisons.

===== Path

* Iterable semantics apply.

===== Set

* Iterable semantics apply.

===== List

* Iterable semantics apply.

===== Map

* Iterable semantics apply for `Map.entrySet()`
* Map Entries are ordered first by key, then by value according to orderability semantics.

===== Unknown

* If the unknown arguments are of the same type and implement Comparable, their natural order is used.
* If the unknown arguments are of different types or do not define a natural order, order first by Classname, then
by `Object.toString()`.

